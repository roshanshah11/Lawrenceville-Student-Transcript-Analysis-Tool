{"version":3,"file":"static/js/430.6b57e2c2.chunk.js","mappings":"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","sources":["TranscriptUploader.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst TranscriptUploader = ({ darkMode }) => {\n    // State variables\n    const [file, setFile] = useState(null); // Stores the uploaded file\n    const [grades, setGrades] = useState(null); // Stores extracted grades from the transcript\n    const [loading, setLoading] = useState(false); // Tracks loading state during file processing\n    const [error, setError] = useState(\"\"); // Stores error messages\n    const [showGrades, setShowGrades] = useState(false); // Controls visibility of the grades section\n    const [selectedGrade, setSelectedGrade] = useState(null); // Stores the currently selected grade for detailed view\n\n    // Inject CSS animations into the DOM dynamically\n    useEffect(() => {\n        const style = document.createElement(\"style\");\n        style.innerHTML = `\n            @keyframes fadeIn {\n                from {\n                    opacity: 0;\n                    transform: scale(0.95);\n                }\n                to {\n                    opacity: 1;\n                    transform: scale(1);\n                }\n            }\n            .animate-fade-in {\n                animation: fadeIn 0.3s ease-out;\n            }\n            @keyframes bounce {\n                0%, 100% {\n                    transform: translateY(0);\n                }\n                50% {\n                    transform: translateY(-10px);\n                }\n            }\n            .animate-bounce {\n                animation: bounce 0.5s infinite;\n            }\n        `;\n        document.head.appendChild(style); // Add the styles to the document head\n\n        return () => {\n            document.head.removeChild(style); // Clean up by removing the styles when the component unmounts\n        };\n    }, []);\n\n    // Handles file input change\n    const handleFileChange = (event) => {\n        setFile(event.target.files[0]); // Update the file state with the selected file\n    };\n\n    // Handles file upload and processing\n    const handleUpload = async () => {\n        if (!file) {\n            setError(\"Please select a file.\"); // Show error if no file is selected\n            return;\n        }\n\n        setError(\"\"); // Clear any previous errors\n        setLoading(true); // Set loading state to true\n        setShowGrades(false); // Hide grades section during processing\n\n        const formData = new FormData();\n        formData.append(\"file\", file); // Append the file to the form data\n\n        try {\n            // Send the file to the backend for processing\n            const response = await axios.post(\"http://localhost:5000/extract-grades\", formData, {\n                headers: { \"Content-Type\": \"multipart/form-data\" },\n            });\n\n            setGrades(response.data); // Store the extracted grades\n            setShowGrades(true); // Show the grades section\n        } catch (err) {\n            setError(\"Failed to process transcript.\"); // Show error if processing fails\n            console.error(\"Upload error:\", err);\n        } finally {\n            setTimeout(() => {\n                setLoading(false); // Reset loading state after a delay\n            }, 1500);\n        }\n    };\n\n    // Renders the list of grades as clickable cards\n    const renderGrades = (grades) => {\n        return (\n            <div className=\"grid grid-cols-2 gap-4\">\n                {grades.Grades.map((grade, index) => (\n                    <div\n                        key={index}\n                        className={`p-4 rounded-lg shadow-md cursor-pointer transform transition-all duration-300 hover:scale-105 ${\n                            darkMode ? \"bg-gray-700 text-white\" : \"bg-white text-gray-800\"\n                        }`}\n                        onClick={() => setSelectedGrade(grade)} // Set the selected grade on click\n                    >\n                        <div className=\"text-center\">\n                            <h4 className=\"font-bold\">Grade {grade[\"Grade Level\"]} ({grade.Year})</h4>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        );\n    };\n\n    // Renders the graduation check section\n    const renderGraduationCheck = (graduationCheck) => {\n        return (\n            <div className={`p-6 rounded-lg shadow-md transform transition-all duration-300 ${\n                darkMode ? \"bg-gray-700 text-white\" : \"bg-gray-50 text-gray-800\"\n            }`}>\n                <h3 className=\"text-xl font-bold mb-4\">Graduation Requirements For The Student</h3>\n                <ul className=\"space-y-2\">\n                    {Object.entries(graduationCheck.requirements[\"Graduation Requirements\"]).map(([category, count], index) => (\n                        <li key={index}>\n                            {category}: {count} required\n                        </li>\n                    ))}\n                </ul>\n                <h3 className=\"text-xl font-bold mt-6 mb-4\">Student Progress</h3>\n                <ul className=\"space-y-2\">\n                    {Object.entries(graduationCheck.progress[\"Student Progress\"]).map(([category, status], index) => (\n                        <li key={index}>\n                            {status}\n                        </li>\n                    ))}\n                </ul>\n                <h3 className=\"text-xl font-bold mt-6 mb-4\">Status</h3>\n                <p className={`text-lg ${graduationCheck.met_all_requirements ? \"text-green-600\" : \"text-red-600\"}`}>\n                    {graduationCheck.met_all_requirements ? \"This student is ready to graduate!\" : \"Please meet the requirements above!\"}\n                </p>\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"container mx-auto p-4\">\n            <div className={`p-6 rounded-lg shadow-md transform transition-all duration-300 ${\n                darkMode ? \"bg-gray-800 text-white\" : \"bg-white text-gray-800\"\n            }`}>\n                <h2 className=\"text-2xl font-bold mb-4\">Single Student Transcript Processing</h2>\n                {/* File input */}\n                <input\n                    type=\"file\"\n                    onChange={handleFileChange}\n                    accept=\".pdf\"\n                    className=\"mb-4 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 transform transition-all duration-300\"\n                />\n                {/* Upload button */}\n                <button\n                    onClick={handleUpload}\n                    disabled={loading}\n                    className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 disabled:bg-blue-300 transform transition-all duration-300 hover:scale-105\"\n                >\n                    {loading ? \"Processing...\" : \"Upload\"}\n                </button>\n                {/* Loading animation */}\n                {loading && (\n                    <div className=\"flex justify-center mt-4\">\n                        <div className=\"loading flex space-x-2\">\n                            {[...Array(5)].map((_, i) => (\n                                <div\n                                    key={i}\n                                    className=\"w-2 h-8 bg-blue-500 animate-bounce\"\n                                    style={{ animationDelay: `${i * 0.1}s` }}\n                                ></div>\n                            ))}\n                        </div>\n                    </div>\n                )}\n                {/* Error message */}\n                {!loading && error && <p className=\"text-red-500 mt-4\">{error}</p>}\n                {/* Grades and graduation check section */}\n                {!loading && showGrades && grades && (\n                    <div className=\"mt-6\">\n                        <div className=\"mb-8\">\n                            <h3 className=\"text-xl font-bold mb-4\">Extracted Grades</h3>\n                            {renderGrades(grades.grades)}\n                        </div>\n                        <div>\n                            <h3 className=\"text-xl font-bold mb-4\">Graduation Check</h3>\n                            {renderGraduationCheck(grades.graduation_check)}\n                        </div>\n                    </div>\n                )}\n                {/* Modal for selected grade details */}\n                {selectedGrade && (\n                    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4\">\n                        <div className={`p-6 rounded-lg shadow-lg max-w-md w-full max-h-[90vh] overflow-y-auto animate-fade-in ${\n                            darkMode ? \"bg-gray-800 text-white\" : \"bg-white text-gray-800\"\n                        }`}>\n                            <button\n                                onClick={() => setSelectedGrade(null)}\n                                className=\"absolute top-2 right-2 text-gray-500 hover:text-gray-700\"\n                            >\n                                &times;\n                            </button>\n                            <h4 className=\"text-xl font-bold mb-4\">Grade {selectedGrade[\"Grade Level\"]} ({selectedGrade.Year})</h4>\n                            <p className=\"mb-4\">Year Average: {selectedGrade[\"Year Average\"]}</p>\n                            <h5 className=\"font-bold mb-2\">Term GPAs:</h5>\n                            <div className=\"grid grid-cols-2 gap-2 mb-4\">\n                                {selectedGrade[\"Term GPAs\"].map((gpa, idx) => (\n                                    <div key={idx} className={`p-2 rounded ${darkMode ? \"bg-gray-700\" : \"bg-gray-50\"}`}>\n                                        {gpa}\n                                    </div>\n                                ))}\n                            </div>\n                            <h5 className=\"font-bold mb-2\">Courses:</h5>\n                            <div className=\"space-y-2\">\n                                {selectedGrade.Courses.map((course, idx) => (\n                                    <div key={idx} className={`flex justify-between p-2 rounded ${darkMode ? \"bg-gray-700\" : \"bg-gray-50\"}`}>\n                                        <span className=\"font-bold\">{course.Course}:</span>\n                                        <span className=\"italic\">{course.Grade}</span>\n                                    </div>\n                                ))}\n                            </div>\n                            <button\n                                onClick={() => setSelectedGrade(null)}\n                                className=\"bg-blue-500 text-white px-4 py-2 rounded mt-4 hover:bg-blue-600 transform transition-all duration-300 hover:scale-105\"\n                            >\n                                Close\n                            </button>\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default TranscriptUploader;"],"names":["_ref","darkMode","file","setFile","useState","grades","setGrades","loading","setLoading","error","setError","showGrades","setShowGrades","selectedGrade","setSelectedGrade","useEffect","style","document","createElement","innerHTML","head","appendChild","removeChild","_jsx","className","children","_jsxs","type","onChange","event","target","files","accept","onClick","async","formData","FormData","append","response","axios","post","headers","data","err","console","setTimeout","disabled","Array","map","_","i","animationDelay","Grades","grade","index","Year","renderGrades","graduationCheck","graduation_check","Object","entries","requirements","_ref2","category","count","progress","_ref3","status","met_all_requirements","gpa","idx","Courses","course","Course","Grade"],"sourceRoot":""}